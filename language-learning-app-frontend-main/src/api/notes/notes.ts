/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  UserWordNoteCreate,
  UserWordNoteResponse
} from '.././model';





/**
 * @summary Create Word Note
 */
export const createWordNoteApiWordsWordIdNotesPost = (
    wordId: number,
    userWordNoteCreate: UserWordNoteCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserWordNoteResponse>> => {
    
    
    return axios.default.post(
      `/api/words/${wordId}/notes`,
      userWordNoteCreate,options
    );
  }



export const getCreateWordNoteApiWordsWordIdNotesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWordNoteApiWordsWordIdNotesPost>>, TError,{wordId: number;data: UserWordNoteCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createWordNoteApiWordsWordIdNotesPost>>, TError,{wordId: number;data: UserWordNoteCreate}, TContext> => {

const mutationKey = ['createWordNoteApiWordsWordIdNotesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWordNoteApiWordsWordIdNotesPost>>, {wordId: number;data: UserWordNoteCreate}> = (props) => {
          const {wordId,data} = props ?? {};

          return  createWordNoteApiWordsWordIdNotesPost(wordId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateWordNoteApiWordsWordIdNotesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createWordNoteApiWordsWordIdNotesPost>>>
    export type CreateWordNoteApiWordsWordIdNotesPostMutationBody = UserWordNoteCreate
    export type CreateWordNoteApiWordsWordIdNotesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Word Note
 */
export const useCreateWordNoteApiWordsWordIdNotesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWordNoteApiWordsWordIdNotesPost>>, TError,{wordId: number;data: UserWordNoteCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createWordNoteApiWordsWordIdNotesPost>>,
        TError,
        {wordId: number;data: UserWordNoteCreate},
        TContext
      > => {

      const mutationOptions = getCreateWordNoteApiWordsWordIdNotesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get Word Notes
 */
export const getWordNotesApiWordsWordIdNotesGet = (
    wordId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserWordNoteResponse[]>> => {
    
    
    return axios.default.get(
      `/api/words/${wordId}/notes`,options
    );
  }


export const getGetWordNotesApiWordsWordIdNotesGetQueryKey = (wordId: number,) => {
    return [`/api/words/${wordId}/notes`] as const;
    }

    
export const getGetWordNotesApiWordsWordIdNotesGetQueryOptions = <TData = Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>, TError = AxiosError<HTTPValidationError>>(wordId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWordNotesApiWordsWordIdNotesGetQueryKey(wordId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>> = ({ signal }) => getWordNotesApiWordsWordIdNotesGet(wordId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(wordId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWordNotesApiWordsWordIdNotesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>>
export type GetWordNotesApiWordsWordIdNotesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Get Word Notes
 */

export function useGetWordNotesApiWordsWordIdNotesGet<TData = Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>, TError = AxiosError<HTTPValidationError>>(
 wordId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWordNotesApiWordsWordIdNotesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWordNotesApiWordsWordIdNotesGetQueryOptions(wordId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Word Note
 */
export const deleteWordNoteApiWordsWordIdNotesNoteIdDelete = (
    wordId: number,
    noteId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/api/words/${wordId}/notes/${noteId}`,options
    );
  }



export const getDeleteWordNoteApiWordsWordIdNotesNoteIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordNoteApiWordsWordIdNotesNoteIdDelete>>, TError,{wordId: number;noteId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWordNoteApiWordsWordIdNotesNoteIdDelete>>, TError,{wordId: number;noteId: number}, TContext> => {

const mutationKey = ['deleteWordNoteApiWordsWordIdNotesNoteIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWordNoteApiWordsWordIdNotesNoteIdDelete>>, {wordId: number;noteId: number}> = (props) => {
          const {wordId,noteId} = props ?? {};

          return  deleteWordNoteApiWordsWordIdNotesNoteIdDelete(wordId,noteId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWordNoteApiWordsWordIdNotesNoteIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWordNoteApiWordsWordIdNotesNoteIdDelete>>>
    
    export type DeleteWordNoteApiWordsWordIdNotesNoteIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Word Note
 */
export const useDeleteWordNoteApiWordsWordIdNotesNoteIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordNoteApiWordsWordIdNotesNoteIdDelete>>, TError,{wordId: number;noteId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWordNoteApiWordsWordIdNotesNoteIdDelete>>,
        TError,
        {wordId: number;noteId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWordNoteApiWordsWordIdNotesNoteIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    