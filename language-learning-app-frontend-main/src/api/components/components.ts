/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  ListWordComponentsApiComponentsGetParams,
  PaginatedWordComponentResponse,
  SearchWordsByComponentApiWordsSearchGetParams,
  WordComponentCreate,
  WordComponentResponse,
  WordResponse
} from '.././model';





/**
 * @summary Add Word Component
 */
export const addWordComponentApiWordsWordIdComponentsPost = (
    wordId: number,
    wordComponentCreate: WordComponentCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse>> => {
    
    
    return axios.default.post(
      `/api/words/${wordId}/components`,
      wordComponentCreate,options
    );
  }



export const getAddWordComponentApiWordsWordIdComponentsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordComponentApiWordsWordIdComponentsPost>>, TError,{wordId: number;data: WordComponentCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addWordComponentApiWordsWordIdComponentsPost>>, TError,{wordId: number;data: WordComponentCreate}, TContext> => {

const mutationKey = ['addWordComponentApiWordsWordIdComponentsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addWordComponentApiWordsWordIdComponentsPost>>, {wordId: number;data: WordComponentCreate}> = (props) => {
          const {wordId,data} = props ?? {};

          return  addWordComponentApiWordsWordIdComponentsPost(wordId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddWordComponentApiWordsWordIdComponentsPostMutationResult = NonNullable<Awaited<ReturnType<typeof addWordComponentApiWordsWordIdComponentsPost>>>
    export type AddWordComponentApiWordsWordIdComponentsPostMutationBody = WordComponentCreate
    export type AddWordComponentApiWordsWordIdComponentsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Word Component
 */
export const useAddWordComponentApiWordsWordIdComponentsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordComponentApiWordsWordIdComponentsPost>>, TError,{wordId: number;data: WordComponentCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addWordComponentApiWordsWordIdComponentsPost>>,
        TError,
        {wordId: number;data: WordComponentCreate},
        TContext
      > => {

      const mutationOptions = getAddWordComponentApiWordsWordIdComponentsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Search Words By Component
 */
export const searchWordsByComponentApiWordsSearchGet = (
    params: SearchWordsByComponentApiWordsSearchGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse[]>> => {
    
    
    return axios.default.get(
      `/api/words/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchWordsByComponentApiWordsSearchGetQueryKey = (params: SearchWordsByComponentApiWordsSearchGetParams,) => {
    return [`/api/words/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchWordsByComponentApiWordsSearchGetQueryOptions = <TData = Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>, TError = AxiosError<HTTPValidationError>>(params: SearchWordsByComponentApiWordsSearchGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchWordsByComponentApiWordsSearchGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>> = ({ signal }) => searchWordsByComponentApiWordsSearchGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchWordsByComponentApiWordsSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>>
export type SearchWordsByComponentApiWordsSearchGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Words By Component
 */

export function useSearchWordsByComponentApiWordsSearchGet<TData = Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>, TError = AxiosError<HTTPValidationError>>(
 params: SearchWordsByComponentApiWordsSearchGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsByComponentApiWordsSearchGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchWordsByComponentApiWordsSearchGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List Word Components
 */
export const listWordComponentsApiComponentsGet = (
    params?: ListWordComponentsApiComponentsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedWordComponentResponse>> => {
    
    
    return axios.default.get(
      `/api/components`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getListWordComponentsApiComponentsGetQueryKey = (params?: ListWordComponentsApiComponentsGetParams,) => {
    return [`/api/components`, ...(params ? [params]: [])] as const;
    }

    
export const getListWordComponentsApiComponentsGetQueryOptions = <TData = Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>, TError = AxiosError<HTTPValidationError>>(params?: ListWordComponentsApiComponentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListWordComponentsApiComponentsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>> = ({ signal }) => listWordComponentsApiComponentsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ListWordComponentsApiComponentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>>
export type ListWordComponentsApiComponentsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary List Word Components
 */

export function useListWordComponentsApiComponentsGet<TData = Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ListWordComponentsApiComponentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listWordComponentsApiComponentsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getListWordComponentsApiComponentsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Word Component
 */
export const getWordComponentApiComponentsComponentIdGet = (
    componentId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordComponentResponse>> => {
    
    
    return axios.default.get(
      `/api/components/${componentId}`,options
    );
  }


export const getGetWordComponentApiComponentsComponentIdGetQueryKey = (componentId: number,) => {
    return [`/api/components/${componentId}`] as const;
    }

    
export const getGetWordComponentApiComponentsComponentIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>, TError = AxiosError<HTTPValidationError>>(componentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWordComponentApiComponentsComponentIdGetQueryKey(componentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>> = ({ signal }) => getWordComponentApiComponentsComponentIdGet(componentId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(componentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWordComponentApiComponentsComponentIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>>
export type GetWordComponentApiComponentsComponentIdGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Get Word Component
 */

export function useGetWordComponentApiComponentsComponentIdGet<TData = Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>, TError = AxiosError<HTTPValidationError>>(
 componentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWordComponentApiComponentsComponentIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWordComponentApiComponentsComponentIdGetQueryOptions(componentId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Word Component
 */
export const updateWordComponentApiComponentsComponentIdPut = (
    componentId: number,
    wordComponentCreate: WordComponentCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordComponentResponse>> => {
    
    
    return axios.default.put(
      `/api/components/${componentId}`,
      wordComponentCreate,options
    );
  }



export const getUpdateWordComponentApiComponentsComponentIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordComponentApiComponentsComponentIdPut>>, TError,{componentId: number;data: WordComponentCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateWordComponentApiComponentsComponentIdPut>>, TError,{componentId: number;data: WordComponentCreate}, TContext> => {

const mutationKey = ['updateWordComponentApiComponentsComponentIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWordComponentApiComponentsComponentIdPut>>, {componentId: number;data: WordComponentCreate}> = (props) => {
          const {componentId,data} = props ?? {};

          return  updateWordComponentApiComponentsComponentIdPut(componentId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateWordComponentApiComponentsComponentIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateWordComponentApiComponentsComponentIdPut>>>
    export type UpdateWordComponentApiComponentsComponentIdPutMutationBody = WordComponentCreate
    export type UpdateWordComponentApiComponentsComponentIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Word Component
 */
export const useUpdateWordComponentApiComponentsComponentIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordComponentApiComponentsComponentIdPut>>, TError,{componentId: number;data: WordComponentCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateWordComponentApiComponentsComponentIdPut>>,
        TError,
        {componentId: number;data: WordComponentCreate},
        TContext
      > => {

      const mutationOptions = getUpdateWordComponentApiComponentsComponentIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Word Component
 */
export const deleteWordComponentApiComponentsComponentIdDelete = (
    componentId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/components/${componentId}`,options
    );
  }



export const getDeleteWordComponentApiComponentsComponentIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordComponentApiComponentsComponentIdDelete>>, TError,{componentId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWordComponentApiComponentsComponentIdDelete>>, TError,{componentId: number}, TContext> => {

const mutationKey = ['deleteWordComponentApiComponentsComponentIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWordComponentApiComponentsComponentIdDelete>>, {componentId: number}> = (props) => {
          const {componentId} = props ?? {};

          return  deleteWordComponentApiComponentsComponentIdDelete(componentId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWordComponentApiComponentsComponentIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWordComponentApiComponentsComponentIdDelete>>>
    
    export type DeleteWordComponentApiComponentsComponentIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Word Component
 */
export const useDeleteWordComponentApiComponentsComponentIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordComponentApiComponentsComponentIdDelete>>, TError,{componentId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWordComponentApiComponentsComponentIdDelete>>,
        TError,
        {componentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWordComponentApiComponentsComponentIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Word Component Link
 */
export const deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete = (
    wordId: number,
    componentId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/words/${wordId}/components/${componentId}`,options
    );
  }



export const getDeleteWordComponentLinkApiWordsWordIdComponentsComponentIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete>>, TError,{wordId: number;componentId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete>>, TError,{wordId: number;componentId: number}, TContext> => {

const mutationKey = ['deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete>>, {wordId: number;componentId: number}> = (props) => {
          const {wordId,componentId} = props ?? {};

          return  deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete(wordId,componentId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWordComponentLinkApiWordsWordIdComponentsComponentIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete>>>
    
    export type DeleteWordComponentLinkApiWordsWordIdComponentsComponentIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Word Component Link
 */
export const useDeleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete>>, TError,{wordId: number;componentId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWordComponentLinkApiWordsWordIdComponentsComponentIdDelete>>,
        TError,
        {wordId: number;componentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWordComponentLinkApiWordsWordIdComponentsComponentIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    