/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteSemanticGroupApiSemanticGroupsGroupIdDelete200,
  HTTPValidationError,
  SemanticGroupCreate,
  SemanticGroupResponse,
  UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody
} from '.././model';





/**
 * @summary List Semantic Groups
 */
export const listSemanticGroupsApiSemanticGroupsGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SemanticGroupResponse[]>> => {
    
    
    return axios.default.get(
      `/api/semantic-groups`,options
    );
  }


export const getListSemanticGroupsApiSemanticGroupsGetQueryKey = () => {
    return [`/api/semantic-groups`] as const;
    }

    
export const getListSemanticGroupsApiSemanticGroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSemanticGroupsApiSemanticGroupsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>> = ({ signal }) => listSemanticGroupsApiSemanticGroupsGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ListSemanticGroupsApiSemanticGroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>>
export type ListSemanticGroupsApiSemanticGroupsGetQueryError = AxiosError<unknown>


/**
 * @summary List Semantic Groups
 */

export function useListSemanticGroupsApiSemanticGroupsGet<TData = Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSemanticGroupsApiSemanticGroupsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getListSemanticGroupsApiSemanticGroupsGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Semantic Group
 */
export const createSemanticGroupApiSemanticGroupsPost = (
    semanticGroupCreate: SemanticGroupCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SemanticGroupResponse>> => {
    
    
    return axios.default.post(
      `/api/semantic-groups`,
      semanticGroupCreate,options
    );
  }



export const getCreateSemanticGroupApiSemanticGroupsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSemanticGroupApiSemanticGroupsPost>>, TError,{data: SemanticGroupCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createSemanticGroupApiSemanticGroupsPost>>, TError,{data: SemanticGroupCreate}, TContext> => {

const mutationKey = ['createSemanticGroupApiSemanticGroupsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSemanticGroupApiSemanticGroupsPost>>, {data: SemanticGroupCreate}> = (props) => {
          const {data} = props ?? {};

          return  createSemanticGroupApiSemanticGroupsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSemanticGroupApiSemanticGroupsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createSemanticGroupApiSemanticGroupsPost>>>
    export type CreateSemanticGroupApiSemanticGroupsPostMutationBody = SemanticGroupCreate
    export type CreateSemanticGroupApiSemanticGroupsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Semantic Group
 */
export const useCreateSemanticGroupApiSemanticGroupsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSemanticGroupApiSemanticGroupsPost>>, TError,{data: SemanticGroupCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createSemanticGroupApiSemanticGroupsPost>>,
        TError,
        {data: SemanticGroupCreate},
        TContext
      > => {

      const mutationOptions = getCreateSemanticGroupApiSemanticGroupsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get Semantic Group
 */
export const getSemanticGroupApiSemanticGroupsGroupIdGet = (
    groupId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SemanticGroupResponse>> => {
    
    
    return axios.default.get(
      `/api/semantic-groups/${groupId}`,options
    );
  }


export const getGetSemanticGroupApiSemanticGroupsGroupIdGetQueryKey = (groupId: number,) => {
    return [`/api/semantic-groups/${groupId}`] as const;
    }

    
export const getGetSemanticGroupApiSemanticGroupsGroupIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>, TError = AxiosError<HTTPValidationError>>(groupId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSemanticGroupApiSemanticGroupsGroupIdGetQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>> = ({ signal }) => getSemanticGroupApiSemanticGroupsGroupIdGet(groupId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSemanticGroupApiSemanticGroupsGroupIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>>
export type GetSemanticGroupApiSemanticGroupsGroupIdGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Get Semantic Group
 */

export function useGetSemanticGroupApiSemanticGroupsGroupIdGet<TData = Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>, TError = AxiosError<HTTPValidationError>>(
 groupId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSemanticGroupApiSemanticGroupsGroupIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSemanticGroupApiSemanticGroupsGroupIdGetQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Semantic Group
 */
export const updateSemanticGroupApiSemanticGroupsGroupIdPatch = (
    groupId: number,
    updateSemanticGroupApiSemanticGroupsGroupIdPatchBody: UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SemanticGroupResponse>> => {
    
    
    return axios.default.patch(
      `/api/semantic-groups/${groupId}`,
      updateSemanticGroupApiSemanticGroupsGroupIdPatchBody,options
    );
  }



export const getUpdateSemanticGroupApiSemanticGroupsGroupIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSemanticGroupApiSemanticGroupsGroupIdPatch>>, TError,{groupId: number;data: UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateSemanticGroupApiSemanticGroupsGroupIdPatch>>, TError,{groupId: number;data: UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody}, TContext> => {

const mutationKey = ['updateSemanticGroupApiSemanticGroupsGroupIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSemanticGroupApiSemanticGroupsGroupIdPatch>>, {groupId: number;data: UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody}> = (props) => {
          const {groupId,data} = props ?? {};

          return  updateSemanticGroupApiSemanticGroupsGroupIdPatch(groupId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSemanticGroupApiSemanticGroupsGroupIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateSemanticGroupApiSemanticGroupsGroupIdPatch>>>
    export type UpdateSemanticGroupApiSemanticGroupsGroupIdPatchMutationBody = UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody
    export type UpdateSemanticGroupApiSemanticGroupsGroupIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Semantic Group
 */
export const useUpdateSemanticGroupApiSemanticGroupsGroupIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSemanticGroupApiSemanticGroupsGroupIdPatch>>, TError,{groupId: number;data: UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateSemanticGroupApiSemanticGroupsGroupIdPatch>>,
        TError,
        {groupId: number;data: UpdateSemanticGroupApiSemanticGroupsGroupIdPatchBody},
        TContext
      > => {

      const mutationOptions = getUpdateSemanticGroupApiSemanticGroupsGroupIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Semantic Group
 */
export const deleteSemanticGroupApiSemanticGroupsGroupIdDelete = (
    groupId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteSemanticGroupApiSemanticGroupsGroupIdDelete200>> => {
    
    
    return axios.default.delete(
      `/api/semantic-groups/${groupId}`,options
    );
  }



export const getDeleteSemanticGroupApiSemanticGroupsGroupIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSemanticGroupApiSemanticGroupsGroupIdDelete>>, TError,{groupId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSemanticGroupApiSemanticGroupsGroupIdDelete>>, TError,{groupId: number}, TContext> => {

const mutationKey = ['deleteSemanticGroupApiSemanticGroupsGroupIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSemanticGroupApiSemanticGroupsGroupIdDelete>>, {groupId: number}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteSemanticGroupApiSemanticGroupsGroupIdDelete(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSemanticGroupApiSemanticGroupsGroupIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSemanticGroupApiSemanticGroupsGroupIdDelete>>>
    
    export type DeleteSemanticGroupApiSemanticGroupsGroupIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Semantic Group
 */
export const useDeleteSemanticGroupApiSemanticGroupsGroupIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSemanticGroupApiSemanticGroupsGroupIdDelete>>, TError,{groupId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteSemanticGroupApiSemanticGroupsGroupIdDelete>>,
        TError,
        {groupId: number},
        TContext
      > => {

      const mutationOptions = getDeleteSemanticGroupApiSemanticGroupsGroupIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    