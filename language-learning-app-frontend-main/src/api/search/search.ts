/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  PaginatedPhraseResponse,
  PaginatedSemanticGroupResponse,
  PaginatedUserAnswerErrorResponse,
  PaginatedWordComponentResponse,
  PaginatedWordResponse,
  SearchMistakesApiSearchMistakesGetParams,
  SearchPhrasesApiSearchPhrasesGetParams,
  SearchSemanticGroupsApiSearchSemanticGroupsGetParams,
  SearchWordComponentsApiSearchWordComponentsGetParams,
  SearchWordsApiSearchWordsGetParams
} from '.././model';





/**
 * @summary Search Words
 */
export const searchWordsApiSearchWordsGet = (
    params?: SearchWordsApiSearchWordsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedWordResponse>> => {
    
    
    return axios.default.get(
      `/api/search/words`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchWordsApiSearchWordsGetQueryKey = (params?: SearchWordsApiSearchWordsGetParams,) => {
    return [`/api/search/words`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchWordsApiSearchWordsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchWordsApiSearchWordsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchWordsApiSearchWordsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>> = ({ signal }) => searchWordsApiSearchWordsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchWordsApiSearchWordsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>>
export type SearchWordsApiSearchWordsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Words
 */

export function useSearchWordsApiSearchWordsGet<TData = Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchWordsApiSearchWordsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsApiSearchWordsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchWordsApiSearchWordsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Phrases
 */
export const searchPhrasesApiSearchPhrasesGet = (
    params?: SearchPhrasesApiSearchPhrasesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedPhraseResponse>> => {
    
    
    return axios.default.get(
      `/api/search/phrases`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchPhrasesApiSearchPhrasesGetQueryKey = (params?: SearchPhrasesApiSearchPhrasesGetParams,) => {
    return [`/api/search/phrases`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchPhrasesApiSearchPhrasesGetQueryOptions = <TData = Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchPhrasesApiSearchPhrasesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchPhrasesApiSearchPhrasesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>> = ({ signal }) => searchPhrasesApiSearchPhrasesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchPhrasesApiSearchPhrasesGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>>
export type SearchPhrasesApiSearchPhrasesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Phrases
 */

export function useSearchPhrasesApiSearchPhrasesGet<TData = Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchPhrasesApiSearchPhrasesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchPhrasesApiSearchPhrasesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchPhrasesApiSearchPhrasesGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Semantic Groups
 */
export const searchSemanticGroupsApiSearchSemanticGroupsGet = (
    params?: SearchSemanticGroupsApiSearchSemanticGroupsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedSemanticGroupResponse>> => {
    
    
    return axios.default.get(
      `/api/search/semantic-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchSemanticGroupsApiSearchSemanticGroupsGetQueryKey = (params?: SearchSemanticGroupsApiSearchSemanticGroupsGetParams,) => {
    return [`/api/search/semantic-groups`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchSemanticGroupsApiSearchSemanticGroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchSemanticGroupsApiSearchSemanticGroupsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchSemanticGroupsApiSearchSemanticGroupsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>> = ({ signal }) => searchSemanticGroupsApiSearchSemanticGroupsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchSemanticGroupsApiSearchSemanticGroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>>
export type SearchSemanticGroupsApiSearchSemanticGroupsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Semantic Groups
 */

export function useSearchSemanticGroupsApiSearchSemanticGroupsGet<TData = Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchSemanticGroupsApiSearchSemanticGroupsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchSemanticGroupsApiSearchSemanticGroupsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchSemanticGroupsApiSearchSemanticGroupsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Mistakes
 */
export const searchMistakesApiSearchMistakesGet = (
    params?: SearchMistakesApiSearchMistakesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedUserAnswerErrorResponse>> => {
    
    
    return axios.default.get(
      `/api/search/mistakes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchMistakesApiSearchMistakesGetQueryKey = (params?: SearchMistakesApiSearchMistakesGetParams,) => {
    return [`/api/search/mistakes`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchMistakesApiSearchMistakesGetQueryOptions = <TData = Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchMistakesApiSearchMistakesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchMistakesApiSearchMistakesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>> = ({ signal }) => searchMistakesApiSearchMistakesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchMistakesApiSearchMistakesGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>>
export type SearchMistakesApiSearchMistakesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Mistakes
 */

export function useSearchMistakesApiSearchMistakesGet<TData = Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchMistakesApiSearchMistakesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchMistakesApiSearchMistakesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchMistakesApiSearchMistakesGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Word Components
 */
export const searchWordComponentsApiSearchWordComponentsGet = (
    params?: SearchWordComponentsApiSearchWordComponentsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedWordComponentResponse>> => {
    
    
    return axios.default.get(
      `/api/search/word-components`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchWordComponentsApiSearchWordComponentsGetQueryKey = (params?: SearchWordComponentsApiSearchWordComponentsGetParams,) => {
    return [`/api/search/word-components`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchWordComponentsApiSearchWordComponentsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchWordComponentsApiSearchWordComponentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchWordComponentsApiSearchWordComponentsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>> = ({ signal }) => searchWordComponentsApiSearchWordComponentsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchWordComponentsApiSearchWordComponentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>>
export type SearchWordComponentsApiSearchWordComponentsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Word Components
 */

export function useSearchWordComponentsApiSearchWordComponentsGet<TData = Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchWordComponentsApiSearchWordComponentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordComponentsApiSearchWordComponentsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchWordComponentsApiSearchWordComponentsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Levels
 */
export const getLevelsApiLevelsGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string[]>> => {
    
    
    return axios.default.get(
      `/api/levels`,options
    );
  }


export const getGetLevelsApiLevelsGetQueryKey = () => {
    return [`/api/levels`] as const;
    }

    
export const getGetLevelsApiLevelsGetQueryOptions = <TData = Awaited<ReturnType<typeof getLevelsApiLevelsGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLevelsApiLevelsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLevelsApiLevelsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLevelsApiLevelsGet>>> = ({ signal }) => getLevelsApiLevelsGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLevelsApiLevelsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLevelsApiLevelsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLevelsApiLevelsGet>>>
export type GetLevelsApiLevelsGetQueryError = AxiosError<unknown>


/**
 * @summary Get Levels
 */

export function useGetLevelsApiLevelsGet<TData = Awaited<ReturnType<typeof getLevelsApiLevelsGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLevelsApiLevelsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLevelsApiLevelsGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



