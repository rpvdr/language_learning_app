/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  PartOfSpeechCreate,
  PartOfSpeechResponse
} from '.././model';





/**
 * @summary Read Parts Of Speech
 */
export const readPartsOfSpeechApiPartsOfSpeechGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PartOfSpeechResponse[]>> => {
    
    
    return axios.default.get(
      `/api/parts-of-speech`,options
    );
  }


export const getReadPartsOfSpeechApiPartsOfSpeechGetQueryKey = () => {
    return [`/api/parts-of-speech`] as const;
    }

    
export const getReadPartsOfSpeechApiPartsOfSpeechGetQueryOptions = <TData = Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadPartsOfSpeechApiPartsOfSpeechGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>> = ({ signal }) => readPartsOfSpeechApiPartsOfSpeechGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadPartsOfSpeechApiPartsOfSpeechGetQueryResult = NonNullable<Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>>
export type ReadPartsOfSpeechApiPartsOfSpeechGetQueryError = AxiosError<unknown>


/**
 * @summary Read Parts Of Speech
 */

export function useReadPartsOfSpeechApiPartsOfSpeechGet<TData = Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPartsOfSpeechApiPartsOfSpeechGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadPartsOfSpeechApiPartsOfSpeechGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Part Of Speech
 */
export const createPartOfSpeechApiPartsOfSpeechPost = (
    partOfSpeechCreate: PartOfSpeechCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PartOfSpeechResponse>> => {
    
    
    return axios.default.post(
      `/api/parts-of-speech`,
      partOfSpeechCreate,options
    );
  }



export const getCreatePartOfSpeechApiPartsOfSpeechPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPartOfSpeechApiPartsOfSpeechPost>>, TError,{data: PartOfSpeechCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createPartOfSpeechApiPartsOfSpeechPost>>, TError,{data: PartOfSpeechCreate}, TContext> => {

const mutationKey = ['createPartOfSpeechApiPartsOfSpeechPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPartOfSpeechApiPartsOfSpeechPost>>, {data: PartOfSpeechCreate}> = (props) => {
          const {data} = props ?? {};

          return  createPartOfSpeechApiPartsOfSpeechPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePartOfSpeechApiPartsOfSpeechPostMutationResult = NonNullable<Awaited<ReturnType<typeof createPartOfSpeechApiPartsOfSpeechPost>>>
    export type CreatePartOfSpeechApiPartsOfSpeechPostMutationBody = PartOfSpeechCreate
    export type CreatePartOfSpeechApiPartsOfSpeechPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Part Of Speech
 */
export const useCreatePartOfSpeechApiPartsOfSpeechPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPartOfSpeechApiPartsOfSpeechPost>>, TError,{data: PartOfSpeechCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createPartOfSpeechApiPartsOfSpeechPost>>,
        TError,
        {data: PartOfSpeechCreate},
        TContext
      > => {

      const mutationOptions = getCreatePartOfSpeechApiPartsOfSpeechPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Read Part Of Speech
 */
export const readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet = (
    partOfSpeechId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PartOfSpeechResponse>> => {
    
    
    return axios.default.get(
      `/api/parts-of-speech/${partOfSpeechId}`,options
    );
  }


export const getReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGetQueryKey = (partOfSpeechId: number,) => {
    return [`/api/parts-of-speech/${partOfSpeechId}`] as const;
    }

    
export const getReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>, TError = AxiosError<HTTPValidationError>>(partOfSpeechId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGetQueryKey(partOfSpeechId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>> = ({ signal }) => readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet(partOfSpeechId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(partOfSpeechId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>>
export type ReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Read Part Of Speech
 */

export function useReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet<TData = Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>, TError = AxiosError<HTTPValidationError>>(
 partOfSpeechId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadPartOfSpeechApiPartsOfSpeechPartOfSpeechIdGetQueryOptions(partOfSpeechId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Part Of Speech
 */
export const deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete = (
    partOfSpeechId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/parts-of-speech/${partOfSpeechId}`,options
    );
  }



export const getDeletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete>>, TError,{partOfSpeechId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete>>, TError,{partOfSpeechId: number}, TContext> => {

const mutationKey = ['deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete>>, {partOfSpeechId: number}> = (props) => {
          const {partOfSpeechId} = props ?? {};

          return  deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete(partOfSpeechId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete>>>
    
    export type DeletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Part Of Speech
 */
export const useDeletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete>>, TError,{partOfSpeechId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDelete>>,
        TError,
        {partOfSpeechId: number},
        TContext
      > => {

      const mutationOptions = getDeletePartOfSpeechApiPartsOfSpeechPartOfSpeechIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    