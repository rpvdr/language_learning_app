/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  PhraseCreate,
  PhraseDetailResponse,
  PhraseMeaningCreate,
  PhraseMeaningExampleCreate,
  PhraseMeaningExampleResponse,
  PhraseMeaningExampleUpdate,
  PhraseMeaningResponse,
  PhraseResponse,
  PhraseUpdate,
  UserPhraseNoteCreate,
  UserPhraseNoteResponse
} from '.././model';





/**
 * @summary Read Phrases
 */
export const readPhrasesApiPhrasesGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseResponse[]>> => {
    
    
    return axios.default.get(
      `/api/phrases`,options
    );
  }


export const getReadPhrasesApiPhrasesGetQueryKey = () => {
    return [`/api/phrases`] as const;
    }

    
export const getReadPhrasesApiPhrasesGetQueryOptions = <TData = Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadPhrasesApiPhrasesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>> = ({ signal }) => readPhrasesApiPhrasesGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadPhrasesApiPhrasesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>>
export type ReadPhrasesApiPhrasesGetQueryError = AxiosError<unknown>


/**
 * @summary Read Phrases
 */

export function useReadPhrasesApiPhrasesGet<TData = Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPhrasesApiPhrasesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadPhrasesApiPhrasesGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Phrase
 */
export const createPhraseApiPhrasesPost = (
    phraseCreate: PhraseCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseResponse>> => {
    
    
    return axios.default.post(
      `/api/phrases`,
      phraseCreate,options
    );
  }



export const getCreatePhraseApiPhrasesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPhraseApiPhrasesPost>>, TError,{data: PhraseCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createPhraseApiPhrasesPost>>, TError,{data: PhraseCreate}, TContext> => {

const mutationKey = ['createPhraseApiPhrasesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPhraseApiPhrasesPost>>, {data: PhraseCreate}> = (props) => {
          const {data} = props ?? {};

          return  createPhraseApiPhrasesPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePhraseApiPhrasesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createPhraseApiPhrasesPost>>>
    export type CreatePhraseApiPhrasesPostMutationBody = PhraseCreate
    export type CreatePhraseApiPhrasesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Phrase
 */
export const useCreatePhraseApiPhrasesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPhraseApiPhrasesPost>>, TError,{data: PhraseCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createPhraseApiPhrasesPost>>,
        TError,
        {data: PhraseCreate},
        TContext
      > => {

      const mutationOptions = getCreatePhraseApiPhrasesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Read Phrase
 */
export const readPhraseApiPhrasesPhraseIdGet = (
    phraseId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseDetailResponse>> => {
    
    
    return axios.default.get(
      `/api/phrases/${phraseId}`,options
    );
  }


export const getReadPhraseApiPhrasesPhraseIdGetQueryKey = (phraseId: number,) => {
    return [`/api/phrases/${phraseId}`] as const;
    }

    
export const getReadPhraseApiPhrasesPhraseIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>, TError = AxiosError<HTTPValidationError>>(phraseId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadPhraseApiPhrasesPhraseIdGetQueryKey(phraseId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>> = ({ signal }) => readPhraseApiPhrasesPhraseIdGet(phraseId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(phraseId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadPhraseApiPhrasesPhraseIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>>
export type ReadPhraseApiPhrasesPhraseIdGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Read Phrase
 */

export function useReadPhraseApiPhrasesPhraseIdGet<TData = Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>, TError = AxiosError<HTTPValidationError>>(
 phraseId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readPhraseApiPhrasesPhraseIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadPhraseApiPhrasesPhraseIdGetQueryOptions(phraseId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Phrase
 */
export const updatePhraseApiPhrasesPhraseIdPut = (
    phraseId: number,
    phraseUpdate: PhraseUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseResponse>> => {
    
    
    return axios.default.put(
      `/api/phrases/${phraseId}`,
      phraseUpdate,options
    );
  }



export const getUpdatePhraseApiPhrasesPhraseIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhraseApiPhrasesPhraseIdPut>>, TError,{phraseId: number;data: PhraseUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePhraseApiPhrasesPhraseIdPut>>, TError,{phraseId: number;data: PhraseUpdate}, TContext> => {

const mutationKey = ['updatePhraseApiPhrasesPhraseIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePhraseApiPhrasesPhraseIdPut>>, {phraseId: number;data: PhraseUpdate}> = (props) => {
          const {phraseId,data} = props ?? {};

          return  updatePhraseApiPhrasesPhraseIdPut(phraseId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePhraseApiPhrasesPhraseIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updatePhraseApiPhrasesPhraseIdPut>>>
    export type UpdatePhraseApiPhrasesPhraseIdPutMutationBody = PhraseUpdate
    export type UpdatePhraseApiPhrasesPhraseIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Phrase
 */
export const useUpdatePhraseApiPhrasesPhraseIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhraseApiPhrasesPhraseIdPut>>, TError,{phraseId: number;data: PhraseUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePhraseApiPhrasesPhraseIdPut>>,
        TError,
        {phraseId: number;data: PhraseUpdate},
        TContext
      > => {

      const mutationOptions = getUpdatePhraseApiPhrasesPhraseIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Phrase
 */
export const deletePhraseApiPhrasesPhraseIdDelete = (
    phraseId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/phrases/${phraseId}`,options
    );
  }



export const getDeletePhraseApiPhrasesPhraseIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhraseApiPhrasesPhraseIdDelete>>, TError,{phraseId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePhraseApiPhrasesPhraseIdDelete>>, TError,{phraseId: number}, TContext> => {

const mutationKey = ['deletePhraseApiPhrasesPhraseIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePhraseApiPhrasesPhraseIdDelete>>, {phraseId: number}> = (props) => {
          const {phraseId} = props ?? {};

          return  deletePhraseApiPhrasesPhraseIdDelete(phraseId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePhraseApiPhrasesPhraseIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deletePhraseApiPhrasesPhraseIdDelete>>>
    
    export type DeletePhraseApiPhrasesPhraseIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Phrase
 */
export const useDeletePhraseApiPhrasesPhraseIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhraseApiPhrasesPhraseIdDelete>>, TError,{phraseId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePhraseApiPhrasesPhraseIdDelete>>,
        TError,
        {phraseId: number},
        TContext
      > => {

      const mutationOptions = getDeletePhraseApiPhrasesPhraseIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add Phrase Meaning
 */
export const addPhraseMeaningApiPhrasesPhraseIdMeaningsPost = (
    phraseId: number,
    phraseMeaningCreate: PhraseMeaningCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseMeaningResponse>> => {
    
    
    return axios.default.post(
      `/api/phrases/${phraseId}/meanings`,
      phraseMeaningCreate,options
    );
  }



export const getAddPhraseMeaningApiPhrasesPhraseIdMeaningsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPhraseMeaningApiPhrasesPhraseIdMeaningsPost>>, TError,{phraseId: number;data: PhraseMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addPhraseMeaningApiPhrasesPhraseIdMeaningsPost>>, TError,{phraseId: number;data: PhraseMeaningCreate}, TContext> => {

const mutationKey = ['addPhraseMeaningApiPhrasesPhraseIdMeaningsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPhraseMeaningApiPhrasesPhraseIdMeaningsPost>>, {phraseId: number;data: PhraseMeaningCreate}> = (props) => {
          const {phraseId,data} = props ?? {};

          return  addPhraseMeaningApiPhrasesPhraseIdMeaningsPost(phraseId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPhraseMeaningApiPhrasesPhraseIdMeaningsPostMutationResult = NonNullable<Awaited<ReturnType<typeof addPhraseMeaningApiPhrasesPhraseIdMeaningsPost>>>
    export type AddPhraseMeaningApiPhrasesPhraseIdMeaningsPostMutationBody = PhraseMeaningCreate
    export type AddPhraseMeaningApiPhrasesPhraseIdMeaningsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Phrase Meaning
 */
export const useAddPhraseMeaningApiPhrasesPhraseIdMeaningsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPhraseMeaningApiPhrasesPhraseIdMeaningsPost>>, TError,{phraseId: number;data: PhraseMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addPhraseMeaningApiPhrasesPhraseIdMeaningsPost>>,
        TError,
        {phraseId: number;data: PhraseMeaningCreate},
        TContext
      > => {

      const mutationOptions = getAddPhraseMeaningApiPhrasesPhraseIdMeaningsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add Phrase Example
 */
export const addPhraseExampleApiPhrasesPhraseIdExamplesPost = (
    phraseId: number,
    phraseMeaningExampleCreate: PhraseMeaningExampleCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseMeaningExampleResponse>> => {
    
    
    return axios.default.post(
      `/api/phrases/${phraseId}/examples`,
      phraseMeaningExampleCreate,options
    );
  }



export const getAddPhraseExampleApiPhrasesPhraseIdExamplesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPhraseExampleApiPhrasesPhraseIdExamplesPost>>, TError,{phraseId: number;data: PhraseMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addPhraseExampleApiPhrasesPhraseIdExamplesPost>>, TError,{phraseId: number;data: PhraseMeaningExampleCreate}, TContext> => {

const mutationKey = ['addPhraseExampleApiPhrasesPhraseIdExamplesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPhraseExampleApiPhrasesPhraseIdExamplesPost>>, {phraseId: number;data: PhraseMeaningExampleCreate}> = (props) => {
          const {phraseId,data} = props ?? {};

          return  addPhraseExampleApiPhrasesPhraseIdExamplesPost(phraseId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPhraseExampleApiPhrasesPhraseIdExamplesPostMutationResult = NonNullable<Awaited<ReturnType<typeof addPhraseExampleApiPhrasesPhraseIdExamplesPost>>>
    export type AddPhraseExampleApiPhrasesPhraseIdExamplesPostMutationBody = PhraseMeaningExampleCreate
    export type AddPhraseExampleApiPhrasesPhraseIdExamplesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Phrase Example
 */
export const useAddPhraseExampleApiPhrasesPhraseIdExamplesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPhraseExampleApiPhrasesPhraseIdExamplesPost>>, TError,{phraseId: number;data: PhraseMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addPhraseExampleApiPhrasesPhraseIdExamplesPost>>,
        TError,
        {phraseId: number;data: PhraseMeaningExampleCreate},
        TContext
      > => {

      const mutationOptions = getAddPhraseExampleApiPhrasesPhraseIdExamplesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add Note
 */
export const addNoteApiPhrasesPhraseIdNotesPost = (
    phraseId: number,
    userPhraseNoteCreate: UserPhraseNoteCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserPhraseNoteResponse>> => {
    
    
    return axios.default.post(
      `/api/phrases/${phraseId}/notes`,
      userPhraseNoteCreate,options
    );
  }



export const getAddNoteApiPhrasesPhraseIdNotesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addNoteApiPhrasesPhraseIdNotesPost>>, TError,{phraseId: number;data: UserPhraseNoteCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addNoteApiPhrasesPhraseIdNotesPost>>, TError,{phraseId: number;data: UserPhraseNoteCreate}, TContext> => {

const mutationKey = ['addNoteApiPhrasesPhraseIdNotesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addNoteApiPhrasesPhraseIdNotesPost>>, {phraseId: number;data: UserPhraseNoteCreate}> = (props) => {
          const {phraseId,data} = props ?? {};

          return  addNoteApiPhrasesPhraseIdNotesPost(phraseId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddNoteApiPhrasesPhraseIdNotesPostMutationResult = NonNullable<Awaited<ReturnType<typeof addNoteApiPhrasesPhraseIdNotesPost>>>
    export type AddNoteApiPhrasesPhraseIdNotesPostMutationBody = UserPhraseNoteCreate
    export type AddNoteApiPhrasesPhraseIdNotesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Note
 */
export const useAddNoteApiPhrasesPhraseIdNotesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addNoteApiPhrasesPhraseIdNotesPost>>, TError,{phraseId: number;data: UserPhraseNoteCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addNoteApiPhrasesPhraseIdNotesPost>>,
        TError,
        {phraseId: number;data: UserPhraseNoteCreate},
        TContext
      > => {

      const mutationOptions = getAddNoteApiPhrasesPhraseIdNotesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Remove Category From Phrase
 */
export const removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch = (
    phraseId: number,
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseResponse>> => {
    
    
    return axios.default.patch(
      `/api/phrases/${phraseId}/remove-category/${categoryId}`,undefined,options
    );
  }



export const getRemoveCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch>>, TError,{phraseId: number;categoryId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch>>, TError,{phraseId: number;categoryId: number}, TContext> => {

const mutationKey = ['removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch>>, {phraseId: number;categoryId: number}> = (props) => {
          const {phraseId,categoryId} = props ?? {};

          return  removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch(phraseId,categoryId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch>>>
    
    export type RemoveCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Remove Category From Phrase
 */
export const useRemoveCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch>>, TError,{phraseId: number;categoryId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof removeCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatch>>,
        TError,
        {phraseId: number;categoryId: number},
        TContext
      > => {

      const mutationOptions = getRemoveCategoryFromPhraseApiPhrasesPhraseIdRemoveCategoryCategoryIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Update Phrase Meaning
 */
export const updatePhraseMeaningApiMeaningsMeaningIdPut = (
    meaningId: number,
    phraseMeaningCreate: PhraseMeaningCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseMeaningResponse>> => {
    
    
    return axios.default.put(
      `/api/meanings/${meaningId}`,
      phraseMeaningCreate,options
    );
  }



export const getUpdatePhraseMeaningApiMeaningsMeaningIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhraseMeaningApiMeaningsMeaningIdPut>>, TError,{meaningId: number;data: PhraseMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePhraseMeaningApiMeaningsMeaningIdPut>>, TError,{meaningId: number;data: PhraseMeaningCreate}, TContext> => {

const mutationKey = ['updatePhraseMeaningApiMeaningsMeaningIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePhraseMeaningApiMeaningsMeaningIdPut>>, {meaningId: number;data: PhraseMeaningCreate}> = (props) => {
          const {meaningId,data} = props ?? {};

          return  updatePhraseMeaningApiMeaningsMeaningIdPut(meaningId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePhraseMeaningApiMeaningsMeaningIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updatePhraseMeaningApiMeaningsMeaningIdPut>>>
    export type UpdatePhraseMeaningApiMeaningsMeaningIdPutMutationBody = PhraseMeaningCreate
    export type UpdatePhraseMeaningApiMeaningsMeaningIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Phrase Meaning
 */
export const useUpdatePhraseMeaningApiMeaningsMeaningIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhraseMeaningApiMeaningsMeaningIdPut>>, TError,{meaningId: number;data: PhraseMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePhraseMeaningApiMeaningsMeaningIdPut>>,
        TError,
        {meaningId: number;data: PhraseMeaningCreate},
        TContext
      > => {

      const mutationOptions = getUpdatePhraseMeaningApiMeaningsMeaningIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Phrase Meaning
 */
export const deletePhraseMeaningApiMeaningsMeaningIdDelete = (
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/meanings/${meaningId}`,options
    );
  }



export const getDeletePhraseMeaningApiMeaningsMeaningIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhraseMeaningApiMeaningsMeaningIdDelete>>, TError,{meaningId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePhraseMeaningApiMeaningsMeaningIdDelete>>, TError,{meaningId: number}, TContext> => {

const mutationKey = ['deletePhraseMeaningApiMeaningsMeaningIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePhraseMeaningApiMeaningsMeaningIdDelete>>, {meaningId: number}> = (props) => {
          const {meaningId} = props ?? {};

          return  deletePhraseMeaningApiMeaningsMeaningIdDelete(meaningId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePhraseMeaningApiMeaningsMeaningIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deletePhraseMeaningApiMeaningsMeaningIdDelete>>>
    
    export type DeletePhraseMeaningApiMeaningsMeaningIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Phrase Meaning
 */
export const useDeletePhraseMeaningApiMeaningsMeaningIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhraseMeaningApiMeaningsMeaningIdDelete>>, TError,{meaningId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePhraseMeaningApiMeaningsMeaningIdDelete>>,
        TError,
        {meaningId: number},
        TContext
      > => {

      const mutationOptions = getDeletePhraseMeaningApiMeaningsMeaningIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Patch Phrase Meaning
 */
export const patchPhraseMeaningApiMeaningsMeaningIdPatch = (
    meaningId: number,
    phraseMeaningCreate: PhraseMeaningCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseMeaningResponse>> => {
    
    
    return axios.default.patch(
      `/api/meanings/${meaningId}`,
      phraseMeaningCreate,options
    );
  }



export const getPatchPhraseMeaningApiMeaningsMeaningIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPhraseMeaningApiMeaningsMeaningIdPatch>>, TError,{meaningId: number;data: PhraseMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchPhraseMeaningApiMeaningsMeaningIdPatch>>, TError,{meaningId: number;data: PhraseMeaningCreate}, TContext> => {

const mutationKey = ['patchPhraseMeaningApiMeaningsMeaningIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchPhraseMeaningApiMeaningsMeaningIdPatch>>, {meaningId: number;data: PhraseMeaningCreate}> = (props) => {
          const {meaningId,data} = props ?? {};

          return  patchPhraseMeaningApiMeaningsMeaningIdPatch(meaningId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchPhraseMeaningApiMeaningsMeaningIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof patchPhraseMeaningApiMeaningsMeaningIdPatch>>>
    export type PatchPhraseMeaningApiMeaningsMeaningIdPatchMutationBody = PhraseMeaningCreate
    export type PatchPhraseMeaningApiMeaningsMeaningIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Patch Phrase Meaning
 */
export const usePatchPhraseMeaningApiMeaningsMeaningIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPhraseMeaningApiMeaningsMeaningIdPatch>>, TError,{meaningId: number;data: PhraseMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchPhraseMeaningApiMeaningsMeaningIdPatch>>,
        TError,
        {meaningId: number;data: PhraseMeaningCreate},
        TContext
      > => {

      const mutationOptions = getPatchPhraseMeaningApiMeaningsMeaningIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Update Phrase Meaning Example
 */
export const updatePhraseMeaningExampleApiExamplesExampleIdPut = (
    exampleId: number,
    phraseMeaningExampleCreate: PhraseMeaningExampleCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseMeaningExampleResponse>> => {
    
    
    return axios.default.put(
      `/api/examples/${exampleId}`,
      phraseMeaningExampleCreate,options
    );
  }



export const getUpdatePhraseMeaningExampleApiExamplesExampleIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhraseMeaningExampleApiExamplesExampleIdPut>>, TError,{exampleId: number;data: PhraseMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePhraseMeaningExampleApiExamplesExampleIdPut>>, TError,{exampleId: number;data: PhraseMeaningExampleCreate}, TContext> => {

const mutationKey = ['updatePhraseMeaningExampleApiExamplesExampleIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePhraseMeaningExampleApiExamplesExampleIdPut>>, {exampleId: number;data: PhraseMeaningExampleCreate}> = (props) => {
          const {exampleId,data} = props ?? {};

          return  updatePhraseMeaningExampleApiExamplesExampleIdPut(exampleId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePhraseMeaningExampleApiExamplesExampleIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updatePhraseMeaningExampleApiExamplesExampleIdPut>>>
    export type UpdatePhraseMeaningExampleApiExamplesExampleIdPutMutationBody = PhraseMeaningExampleCreate
    export type UpdatePhraseMeaningExampleApiExamplesExampleIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Phrase Meaning Example
 */
export const useUpdatePhraseMeaningExampleApiExamplesExampleIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhraseMeaningExampleApiExamplesExampleIdPut>>, TError,{exampleId: number;data: PhraseMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePhraseMeaningExampleApiExamplesExampleIdPut>>,
        TError,
        {exampleId: number;data: PhraseMeaningExampleCreate},
        TContext
      > => {

      const mutationOptions = getUpdatePhraseMeaningExampleApiExamplesExampleIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Phrase Meaning Example
 */
export const deletePhraseMeaningExampleApiExamplesExampleIdDelete = (
    exampleId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/examples/${exampleId}`,options
    );
  }



export const getDeletePhraseMeaningExampleApiExamplesExampleIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhraseMeaningExampleApiExamplesExampleIdDelete>>, TError,{exampleId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePhraseMeaningExampleApiExamplesExampleIdDelete>>, TError,{exampleId: number}, TContext> => {

const mutationKey = ['deletePhraseMeaningExampleApiExamplesExampleIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePhraseMeaningExampleApiExamplesExampleIdDelete>>, {exampleId: number}> = (props) => {
          const {exampleId} = props ?? {};

          return  deletePhraseMeaningExampleApiExamplesExampleIdDelete(exampleId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePhraseMeaningExampleApiExamplesExampleIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deletePhraseMeaningExampleApiExamplesExampleIdDelete>>>
    
    export type DeletePhraseMeaningExampleApiExamplesExampleIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Phrase Meaning Example
 */
export const useDeletePhraseMeaningExampleApiExamplesExampleIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhraseMeaningExampleApiExamplesExampleIdDelete>>, TError,{exampleId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePhraseMeaningExampleApiExamplesExampleIdDelete>>,
        TError,
        {exampleId: number},
        TContext
      > => {

      const mutationOptions = getDeletePhraseMeaningExampleApiExamplesExampleIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Patch Phrase Meaning Example
 */
export const patchPhraseMeaningExampleApiExamplesExampleIdPatch = (
    exampleId: number,
    phraseMeaningExampleUpdate: PhraseMeaningExampleUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseMeaningExampleResponse>> => {
    
    
    return axios.default.patch(
      `/api/examples/${exampleId}`,
      phraseMeaningExampleUpdate,options
    );
  }



export const getPatchPhraseMeaningExampleApiExamplesExampleIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPhraseMeaningExampleApiExamplesExampleIdPatch>>, TError,{exampleId: number;data: PhraseMeaningExampleUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchPhraseMeaningExampleApiExamplesExampleIdPatch>>, TError,{exampleId: number;data: PhraseMeaningExampleUpdate}, TContext> => {

const mutationKey = ['patchPhraseMeaningExampleApiExamplesExampleIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchPhraseMeaningExampleApiExamplesExampleIdPatch>>, {exampleId: number;data: PhraseMeaningExampleUpdate}> = (props) => {
          const {exampleId,data} = props ?? {};

          return  patchPhraseMeaningExampleApiExamplesExampleIdPatch(exampleId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchPhraseMeaningExampleApiExamplesExampleIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof patchPhraseMeaningExampleApiExamplesExampleIdPatch>>>
    export type PatchPhraseMeaningExampleApiExamplesExampleIdPatchMutationBody = PhraseMeaningExampleUpdate
    export type PatchPhraseMeaningExampleApiExamplesExampleIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Patch Phrase Meaning Example
 */
export const usePatchPhraseMeaningExampleApiExamplesExampleIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPhraseMeaningExampleApiExamplesExampleIdPatch>>, TError,{exampleId: number;data: PhraseMeaningExampleUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchPhraseMeaningExampleApiExamplesExampleIdPatch>>,
        TError,
        {exampleId: number;data: PhraseMeaningExampleUpdate},
        TContext
      > => {

      const mutationOptions = getPatchPhraseMeaningExampleApiExamplesExampleIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    