/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CategoryCreate,
  CategoryResponse,
  GetCategoriesApiCategoriesGetParams,
  HTTPValidationError,
  ProfileUpdate,
  UserCreate,
  UserLogin,
  UserResponse
} from '.././model';





/**
 * @summary Register User
 */
export const registerUserApiRegisterPost = (
    userCreate: UserCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResponse>> => {
    
    
    return axios.default.post(
      `/api/register`,
      userCreate,options
    );
  }



export const getRegisterUserApiRegisterPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUserApiRegisterPost>>, TError,{data: UserCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof registerUserApiRegisterPost>>, TError,{data: UserCreate}, TContext> => {

const mutationKey = ['registerUserApiRegisterPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerUserApiRegisterPost>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  registerUserApiRegisterPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterUserApiRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerUserApiRegisterPost>>>
    export type RegisterUserApiRegisterPostMutationBody = UserCreate
    export type RegisterUserApiRegisterPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Register User
 */
export const useRegisterUserApiRegisterPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUserApiRegisterPost>>, TError,{data: UserCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof registerUserApiRegisterPost>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getRegisterUserApiRegisterPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Login User
 */
export const loginUserApiLoginPost = (
    userLogin: UserLogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.post(
      `/api/login`,
      userLogin,options
    );
  }



export const getLoginUserApiLoginPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUserApiLoginPost>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof loginUserApiLoginPost>>, TError,{data: UserLogin}, TContext> => {

const mutationKey = ['loginUserApiLoginPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUserApiLoginPost>>, {data: UserLogin}> = (props) => {
          const {data} = props ?? {};

          return  loginUserApiLoginPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginUserApiLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginUserApiLoginPost>>>
    export type LoginUserApiLoginPostMutationBody = UserLogin
    export type LoginUserApiLoginPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Login User
 */
export const useLoginUserApiLoginPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUserApiLoginPost>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof loginUserApiLoginPost>>,
        TError,
        {data: UserLogin},
        TContext
      > => {

      const mutationOptions = getLoginUserApiLoginPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Read Users Me
 */
export const readUsersMeApiMeGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResponse>> => {
    
    
    return axios.default.get(
      `/api/me`,options
    );
  }


export const getReadUsersMeApiMeGetQueryKey = () => {
    return [`/api/me`] as const;
    }

    
export const getReadUsersMeApiMeGetQueryOptions = <TData = Awaited<ReturnType<typeof readUsersMeApiMeGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readUsersMeApiMeGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadUsersMeApiMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readUsersMeApiMeGet>>> = ({ signal }) => readUsersMeApiMeGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readUsersMeApiMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadUsersMeApiMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUsersMeApiMeGet>>>
export type ReadUsersMeApiMeGetQueryError = AxiosError<unknown>


/**
 * @summary Read Users Me
 */

export function useReadUsersMeApiMeGet<TData = Awaited<ReturnType<typeof readUsersMeApiMeGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readUsersMeApiMeGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadUsersMeApiMeGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Profile
 */
export const updateProfileApiMeProfilePut = (
    profileUpdate: ProfileUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResponse>> => {
    
    
    return axios.default.put(
      `/api/me/profile`,
      profileUpdate,options
    );
  }



export const getUpdateProfileApiMeProfilePutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfileApiMeProfilePut>>, TError,{data: ProfileUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateProfileApiMeProfilePut>>, TError,{data: ProfileUpdate}, TContext> => {

const mutationKey = ['updateProfileApiMeProfilePut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProfileApiMeProfilePut>>, {data: ProfileUpdate}> = (props) => {
          const {data} = props ?? {};

          return  updateProfileApiMeProfilePut(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProfileApiMeProfilePutMutationResult = NonNullable<Awaited<ReturnType<typeof updateProfileApiMeProfilePut>>>
    export type UpdateProfileApiMeProfilePutMutationBody = ProfileUpdate
    export type UpdateProfileApiMeProfilePutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Profile
 */
export const useUpdateProfileApiMeProfilePut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfileApiMeProfilePut>>, TError,{data: ProfileUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProfileApiMeProfilePut>>,
        TError,
        {data: ProfileUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateProfileApiMeProfilePutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Create Category
 */
export const createCategoryApiCategoriesPost = (
    categoryCreate: CategoryCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CategoryResponse>> => {
    
    
    return axios.default.post(
      `/api/categories`,
      categoryCreate,options
    );
  }



export const getCreateCategoryApiCategoriesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategoryApiCategoriesPost>>, TError,{data: CategoryCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createCategoryApiCategoriesPost>>, TError,{data: CategoryCreate}, TContext> => {

const mutationKey = ['createCategoryApiCategoriesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCategoryApiCategoriesPost>>, {data: CategoryCreate}> = (props) => {
          const {data} = props ?? {};

          return  createCategoryApiCategoriesPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCategoryApiCategoriesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createCategoryApiCategoriesPost>>>
    export type CreateCategoryApiCategoriesPostMutationBody = CategoryCreate
    export type CreateCategoryApiCategoriesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Category
 */
export const useCreateCategoryApiCategoriesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategoryApiCategoriesPost>>, TError,{data: CategoryCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createCategoryApiCategoriesPost>>,
        TError,
        {data: CategoryCreate},
        TContext
      > => {

      const mutationOptions = getCreateCategoryApiCategoriesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get Categories
 */
export const getCategoriesApiCategoriesGet = (
    params?: GetCategoriesApiCategoriesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CategoryResponse[]>> => {
    
    
    return axios.default.get(
      `/api/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCategoriesApiCategoriesGetQueryKey = (params?: GetCategoriesApiCategoriesGetParams,) => {
    return [`/api/categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCategoriesApiCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = AxiosError<HTTPValidationError>>(params?: GetCategoriesApiCategoriesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesApiCategoriesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>> = ({ signal }) => getCategoriesApiCategoriesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCategoriesApiCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>>
export type GetCategoriesApiCategoriesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Get Categories
 */

export function useGetCategoriesApiCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetCategoriesApiCategoriesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCategoriesApiCategoriesGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



