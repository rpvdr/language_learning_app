/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  PhraseLabelCreate,
  PhraseLabelResponse,
  ReadLabelsApiLabelsGetParams
} from '.././model';





/**
 * @summary Create Label
 */
export const createLabelApiLabelsPost = (
    phraseLabelCreate: PhraseLabelCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseLabelResponse>> => {
    
    
    return axios.default.post(
      `/api/labels`,
      phraseLabelCreate,options
    );
  }



export const getCreateLabelApiLabelsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLabelApiLabelsPost>>, TError,{data: PhraseLabelCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createLabelApiLabelsPost>>, TError,{data: PhraseLabelCreate}, TContext> => {

const mutationKey = ['createLabelApiLabelsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLabelApiLabelsPost>>, {data: PhraseLabelCreate}> = (props) => {
          const {data} = props ?? {};

          return  createLabelApiLabelsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLabelApiLabelsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createLabelApiLabelsPost>>>
    export type CreateLabelApiLabelsPostMutationBody = PhraseLabelCreate
    export type CreateLabelApiLabelsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Label
 */
export const useCreateLabelApiLabelsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLabelApiLabelsPost>>, TError,{data: PhraseLabelCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createLabelApiLabelsPost>>,
        TError,
        {data: PhraseLabelCreate},
        TContext
      > => {

      const mutationOptions = getCreateLabelApiLabelsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Read Labels
 */
export const readLabelsApiLabelsGet = (
    params?: ReadLabelsApiLabelsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseLabelResponse[]>> => {
    
    
    return axios.default.get(
      `/api/labels`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getReadLabelsApiLabelsGetQueryKey = (params?: ReadLabelsApiLabelsGetParams,) => {
    return [`/api/labels`, ...(params ? [params]: [])] as const;
    }

    
export const getReadLabelsApiLabelsGetQueryOptions = <TData = Awaited<ReturnType<typeof readLabelsApiLabelsGet>>, TError = AxiosError<HTTPValidationError>>(params?: ReadLabelsApiLabelsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readLabelsApiLabelsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadLabelsApiLabelsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readLabelsApiLabelsGet>>> = ({ signal }) => readLabelsApiLabelsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readLabelsApiLabelsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadLabelsApiLabelsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readLabelsApiLabelsGet>>>
export type ReadLabelsApiLabelsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Read Labels
 */

export function useReadLabelsApiLabelsGet<TData = Awaited<ReturnType<typeof readLabelsApiLabelsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadLabelsApiLabelsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readLabelsApiLabelsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadLabelsApiLabelsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Labels By Phrase
 */
export const getLabelsByPhraseApiLabelsByPhrasePhraseIdGet = (
    phraseId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhraseLabelResponse[]>> => {
    
    
    return axios.default.get(
      `/api/labels/by-phrase/${phraseId}`,options
    );
  }


export const getGetLabelsByPhraseApiLabelsByPhrasePhraseIdGetQueryKey = (phraseId: number,) => {
    return [`/api/labels/by-phrase/${phraseId}`] as const;
    }

    
export const getGetLabelsByPhraseApiLabelsByPhrasePhraseIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>, TError = AxiosError<HTTPValidationError>>(phraseId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLabelsByPhraseApiLabelsByPhrasePhraseIdGetQueryKey(phraseId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>> = ({ signal }) => getLabelsByPhraseApiLabelsByPhrasePhraseIdGet(phraseId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(phraseId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLabelsByPhraseApiLabelsByPhrasePhraseIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>>
export type GetLabelsByPhraseApiLabelsByPhrasePhraseIdGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Get Labels By Phrase
 */

export function useGetLabelsByPhraseApiLabelsByPhrasePhraseIdGet<TData = Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>, TError = AxiosError<HTTPValidationError>>(
 phraseId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLabelsByPhraseApiLabelsByPhrasePhraseIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLabelsByPhraseApiLabelsByPhrasePhraseIdGetQueryOptions(phraseId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



