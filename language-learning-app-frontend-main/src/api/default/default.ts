/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  PaginatedPhraseResponse,
  PaginatedSemanticGroupResponse,
  PaginatedUserAnswerErrorResponse,
  PaginatedWordComponentResponse,
  PaginatedWordResponse,
  SearchMistakesSearchMistakesGetParams,
  SearchPhrasesSearchPhrasesGetParams,
  SearchSemanticGroupsSearchSemanticGroupsGetParams,
  SearchWordComponentsSearchWordComponentsGetParams,
  SearchWordsSearchWordsGetParams
} from '.././model';





/**
 * @summary Search Words
 */
export const searchWordsSearchWordsGet = (
    params?: SearchWordsSearchWordsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedWordResponse>> => {
    
    
    return axios.default.get(
      `/search/words`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchWordsSearchWordsGetQueryKey = (params?: SearchWordsSearchWordsGetParams,) => {
    return [`/search/words`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchWordsSearchWordsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchWordsSearchWordsGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchWordsSearchWordsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsSearchWordsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchWordsSearchWordsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchWordsSearchWordsGet>>> = ({ signal }) => searchWordsSearchWordsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchWordsSearchWordsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchWordsSearchWordsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchWordsSearchWordsGet>>>
export type SearchWordsSearchWordsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Words
 */

export function useSearchWordsSearchWordsGet<TData = Awaited<ReturnType<typeof searchWordsSearchWordsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchWordsSearchWordsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsSearchWordsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchWordsSearchWordsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Phrases
 */
export const searchPhrasesSearchPhrasesGet = (
    params?: SearchPhrasesSearchPhrasesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedPhraseResponse>> => {
    
    
    return axios.default.get(
      `/search/phrases`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchPhrasesSearchPhrasesGetQueryKey = (params?: SearchPhrasesSearchPhrasesGetParams,) => {
    return [`/search/phrases`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchPhrasesSearchPhrasesGetQueryOptions = <TData = Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchPhrasesSearchPhrasesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchPhrasesSearchPhrasesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>> = ({ signal }) => searchPhrasesSearchPhrasesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchPhrasesSearchPhrasesGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>>
export type SearchPhrasesSearchPhrasesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Phrases
 */

export function useSearchPhrasesSearchPhrasesGet<TData = Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchPhrasesSearchPhrasesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchPhrasesSearchPhrasesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchPhrasesSearchPhrasesGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Semantic Groups
 */
export const searchSemanticGroupsSearchSemanticGroupsGet = (
    params?: SearchSemanticGroupsSearchSemanticGroupsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedSemanticGroupResponse>> => {
    
    
    return axios.default.get(
      `/search/semantic-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchSemanticGroupsSearchSemanticGroupsGetQueryKey = (params?: SearchSemanticGroupsSearchSemanticGroupsGetParams,) => {
    return [`/search/semantic-groups`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchSemanticGroupsSearchSemanticGroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchSemanticGroupsSearchSemanticGroupsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchSemanticGroupsSearchSemanticGroupsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>> = ({ signal }) => searchSemanticGroupsSearchSemanticGroupsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchSemanticGroupsSearchSemanticGroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>>
export type SearchSemanticGroupsSearchSemanticGroupsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Semantic Groups
 */

export function useSearchSemanticGroupsSearchSemanticGroupsGet<TData = Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchSemanticGroupsSearchSemanticGroupsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchSemanticGroupsSearchSemanticGroupsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchSemanticGroupsSearchSemanticGroupsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Mistakes
 */
export const searchMistakesSearchMistakesGet = (
    params?: SearchMistakesSearchMistakesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedUserAnswerErrorResponse>> => {
    
    
    return axios.default.get(
      `/search/mistakes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchMistakesSearchMistakesGetQueryKey = (params?: SearchMistakesSearchMistakesGetParams,) => {
    return [`/search/mistakes`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchMistakesSearchMistakesGetQueryOptions = <TData = Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchMistakesSearchMistakesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchMistakesSearchMistakesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>> = ({ signal }) => searchMistakesSearchMistakesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchMistakesSearchMistakesGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>>
export type SearchMistakesSearchMistakesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Mistakes
 */

export function useSearchMistakesSearchMistakesGet<TData = Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchMistakesSearchMistakesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchMistakesSearchMistakesGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchMistakesSearchMistakesGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Word Components
 */
export const searchWordComponentsSearchWordComponentsGet = (
    params?: SearchWordComponentsSearchWordComponentsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedWordComponentResponse>> => {
    
    
    return axios.default.get(
      `/search/word-components`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchWordComponentsSearchWordComponentsGetQueryKey = (params?: SearchWordComponentsSearchWordComponentsGetParams,) => {
    return [`/search/word-components`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchWordComponentsSearchWordComponentsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchWordComponentsSearchWordComponentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchWordComponentsSearchWordComponentsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>> = ({ signal }) => searchWordComponentsSearchWordComponentsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchWordComponentsSearchWordComponentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>>
export type SearchWordComponentsSearchWordComponentsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Word Components
 */

export function useSearchWordComponentsSearchWordComponentsGet<TData = Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchWordComponentsSearchWordComponentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordComponentsSearchWordComponentsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchWordComponentsSearchWordComponentsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Levels
 */
export const getLevelsLevelsGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string[]>> => {
    
    
    return axios.default.get(
      `/levels`,options
    );
  }


export const getGetLevelsLevelsGetQueryKey = () => {
    return [`/levels`] as const;
    }

    
export const getGetLevelsLevelsGetQueryOptions = <TData = Awaited<ReturnType<typeof getLevelsLevelsGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLevelsLevelsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLevelsLevelsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLevelsLevelsGet>>> = ({ signal }) => getLevelsLevelsGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLevelsLevelsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLevelsLevelsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLevelsLevelsGet>>>
export type GetLevelsLevelsGetQueryError = AxiosError<unknown>


/**
 * @summary Get Levels
 */

export function useGetLevelsLevelsGet<TData = Awaited<ReturnType<typeof getLevelsLevelsGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLevelsLevelsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLevelsLevelsGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



