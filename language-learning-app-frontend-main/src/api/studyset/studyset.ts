/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  StudySetGenerateRequest,
  UserStudySetResponse
} from '.././model';





/**
 * @summary Generate Study Set
 */
export const generateStudySetApiStudysetGeneratePost = (
    studySetGenerateRequest: StudySetGenerateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserStudySetResponse>> => {
    
    
    return axios.default.post(
      `/api/studyset/generate`,
      studySetGenerateRequest,options
    );
  }



export const getGenerateStudySetApiStudysetGeneratePostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateStudySetApiStudysetGeneratePost>>, TError,{data: StudySetGenerateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof generateStudySetApiStudysetGeneratePost>>, TError,{data: StudySetGenerateRequest}, TContext> => {

const mutationKey = ['generateStudySetApiStudysetGeneratePost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateStudySetApiStudysetGeneratePost>>, {data: StudySetGenerateRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateStudySetApiStudysetGeneratePost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateStudySetApiStudysetGeneratePostMutationResult = NonNullable<Awaited<ReturnType<typeof generateStudySetApiStudysetGeneratePost>>>
    export type GenerateStudySetApiStudysetGeneratePostMutationBody = StudySetGenerateRequest
    export type GenerateStudySetApiStudysetGeneratePostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Generate Study Set
 */
export const useGenerateStudySetApiStudysetGeneratePost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateStudySetApiStudysetGeneratePost>>, TError,{data: StudySetGenerateRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof generateStudySetApiStudysetGeneratePost>>,
        TError,
        {data: StudySetGenerateRequest},
        TContext
      > => {

      const mutationOptions = getGenerateStudySetApiStudysetGeneratePostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get Latest Study Set
 */
export const getLatestStudySetApiStudysetLatestGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserStudySetResponse>> => {
    
    
    return axios.default.get(
      `/api/studyset/latest`,options
    );
  }


export const getGetLatestStudySetApiStudysetLatestGetQueryKey = () => {
    return [`/api/studyset/latest`] as const;
    }

    
export const getGetLatestStudySetApiStudysetLatestGetQueryOptions = <TData = Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestStudySetApiStudysetLatestGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>> = ({ signal }) => getLatestStudySetApiStudysetLatestGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLatestStudySetApiStudysetLatestGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>>
export type GetLatestStudySetApiStudysetLatestGetQueryError = AxiosError<unknown>


/**
 * @summary Get Latest Study Set
 */

export function useGetLatestStudySetApiStudysetLatestGet<TData = Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLatestStudySetApiStudysetLatestGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLatestStudySetApiStudysetLatestGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Latest Special Study Set
 */
export const getLatestSpecialStudySetApiSpecialStudysetLatestGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserStudySetResponse>> => {
    
    
    return axios.default.get(
      `/api/special-studyset/latest`,options
    );
  }


export const getGetLatestSpecialStudySetApiSpecialStudysetLatestGetQueryKey = () => {
    return [`/api/special-studyset/latest`] as const;
    }

    
export const getGetLatestSpecialStudySetApiSpecialStudysetLatestGetQueryOptions = <TData = Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestSpecialStudySetApiSpecialStudysetLatestGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>> = ({ signal }) => getLatestSpecialStudySetApiSpecialStudysetLatestGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLatestSpecialStudySetApiSpecialStudysetLatestGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>>
export type GetLatestSpecialStudySetApiSpecialStudysetLatestGetQueryError = AxiosError<unknown>


/**
 * @summary Get Latest Special Study Set
 */

export function useGetLatestSpecialStudySetApiSpecialStudysetLatestGet<TData = Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLatestSpecialStudySetApiSpecialStudysetLatestGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLatestSpecialStudySetApiSpecialStudysetLatestGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



