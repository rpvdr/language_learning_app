/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * German Language Learning API
 * API for managing German words, phrases, components, examples, and semantic groups.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  ReadWordsApiWordsGetParams,
  SearchWordsByTextApiWordsSearchByTextGetParams,
  WordCreate,
  WordMeaningCreate,
  WordMeaningExampleCreate,
  WordMeaningExampleResponse,
  WordMeaningExampleUpdate,
  WordMeaningResponse,
  WordResponse,
  WordUpdate
} from '.././model';





/**
 * @summary Create Word
 */
export const createWordApiWordsPost = (
    wordCreate: WordCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse>> => {
    
    
    return axios.default.post(
      `/api/words`,
      wordCreate,options
    );
  }



export const getCreateWordApiWordsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWordApiWordsPost>>, TError,{data: WordCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createWordApiWordsPost>>, TError,{data: WordCreate}, TContext> => {

const mutationKey = ['createWordApiWordsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWordApiWordsPost>>, {data: WordCreate}> = (props) => {
          const {data} = props ?? {};

          return  createWordApiWordsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateWordApiWordsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createWordApiWordsPost>>>
    export type CreateWordApiWordsPostMutationBody = WordCreate
    export type CreateWordApiWordsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Word
 */
export const useCreateWordApiWordsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWordApiWordsPost>>, TError,{data: WordCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createWordApiWordsPost>>,
        TError,
        {data: WordCreate},
        TContext
      > => {

      const mutationOptions = getCreateWordApiWordsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Read Words
 */
export const readWordsApiWordsGet = (
    params?: ReadWordsApiWordsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse[]>> => {
    
    
    return axios.default.get(
      `/api/words`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getReadWordsApiWordsGetQueryKey = (params?: ReadWordsApiWordsGetParams,) => {
    return [`/api/words`, ...(params ? [params]: [])] as const;
    }

    
export const getReadWordsApiWordsGetQueryOptions = <TData = Awaited<ReturnType<typeof readWordsApiWordsGet>>, TError = AxiosError<HTTPValidationError>>(params?: ReadWordsApiWordsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readWordsApiWordsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadWordsApiWordsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readWordsApiWordsGet>>> = ({ signal }) => readWordsApiWordsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readWordsApiWordsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadWordsApiWordsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readWordsApiWordsGet>>>
export type ReadWordsApiWordsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Read Words
 */

export function useReadWordsApiWordsGet<TData = Awaited<ReturnType<typeof readWordsApiWordsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadWordsApiWordsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readWordsApiWordsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadWordsApiWordsGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Read Word
 */
export const readWordApiWordsWordIdGet = (
    wordId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse>> => {
    
    
    return axios.default.get(
      `/api/words/${wordId}`,options
    );
  }


export const getReadWordApiWordsWordIdGetQueryKey = (wordId: number,) => {
    return [`/api/words/${wordId}`] as const;
    }

    
export const getReadWordApiWordsWordIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>, TError = AxiosError<HTTPValidationError>>(wordId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadWordApiWordsWordIdGetQueryKey(wordId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>> = ({ signal }) => readWordApiWordsWordIdGet(wordId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(wordId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ReadWordApiWordsWordIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>>
export type ReadWordApiWordsWordIdGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Read Word
 */

export function useReadWordApiWordsWordIdGet<TData = Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>, TError = AxiosError<HTTPValidationError>>(
 wordId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readWordApiWordsWordIdGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getReadWordApiWordsWordIdGetQueryOptions(wordId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Word
 */
export const updateWordApiWordsWordIdPut = (
    wordId: number,
    wordUpdate: WordUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse>> => {
    
    
    return axios.default.put(
      `/api/words/${wordId}`,
      wordUpdate,options
    );
  }



export const getUpdateWordApiWordsWordIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordApiWordsWordIdPut>>, TError,{wordId: number;data: WordUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateWordApiWordsWordIdPut>>, TError,{wordId: number;data: WordUpdate}, TContext> => {

const mutationKey = ['updateWordApiWordsWordIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWordApiWordsWordIdPut>>, {wordId: number;data: WordUpdate}> = (props) => {
          const {wordId,data} = props ?? {};

          return  updateWordApiWordsWordIdPut(wordId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateWordApiWordsWordIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateWordApiWordsWordIdPut>>>
    export type UpdateWordApiWordsWordIdPutMutationBody = WordUpdate
    export type UpdateWordApiWordsWordIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Word
 */
export const useUpdateWordApiWordsWordIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordApiWordsWordIdPut>>, TError,{wordId: number;data: WordUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateWordApiWordsWordIdPut>>,
        TError,
        {wordId: number;data: WordUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateWordApiWordsWordIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Word
 */
export const deleteWordApiWordsWordIdDelete = (
    wordId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/words/${wordId}`,options
    );
  }



export const getDeleteWordApiWordsWordIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordApiWordsWordIdDelete>>, TError,{wordId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWordApiWordsWordIdDelete>>, TError,{wordId: number}, TContext> => {

const mutationKey = ['deleteWordApiWordsWordIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWordApiWordsWordIdDelete>>, {wordId: number}> = (props) => {
          const {wordId} = props ?? {};

          return  deleteWordApiWordsWordIdDelete(wordId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWordApiWordsWordIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWordApiWordsWordIdDelete>>>
    
    export type DeleteWordApiWordsWordIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Word
 */
export const useDeleteWordApiWordsWordIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordApiWordsWordIdDelete>>, TError,{wordId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWordApiWordsWordIdDelete>>,
        TError,
        {wordId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWordApiWordsWordIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add Word Meaning
 */
export const addWordMeaningApiWordsWordIdMeaningsPost = (
    wordId: number,
    wordMeaningCreate: WordMeaningCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningResponse>> => {
    
    
    return axios.default.post(
      `/api/words/${wordId}/meanings`,
      wordMeaningCreate,options
    );
  }



export const getAddWordMeaningApiWordsWordIdMeaningsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordMeaningApiWordsWordIdMeaningsPost>>, TError,{wordId: number;data: WordMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addWordMeaningApiWordsWordIdMeaningsPost>>, TError,{wordId: number;data: WordMeaningCreate}, TContext> => {

const mutationKey = ['addWordMeaningApiWordsWordIdMeaningsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addWordMeaningApiWordsWordIdMeaningsPost>>, {wordId: number;data: WordMeaningCreate}> = (props) => {
          const {wordId,data} = props ?? {};

          return  addWordMeaningApiWordsWordIdMeaningsPost(wordId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddWordMeaningApiWordsWordIdMeaningsPostMutationResult = NonNullable<Awaited<ReturnType<typeof addWordMeaningApiWordsWordIdMeaningsPost>>>
    export type AddWordMeaningApiWordsWordIdMeaningsPostMutationBody = WordMeaningCreate
    export type AddWordMeaningApiWordsWordIdMeaningsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Word Meaning
 */
export const useAddWordMeaningApiWordsWordIdMeaningsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordMeaningApiWordsWordIdMeaningsPost>>, TError,{wordId: number;data: WordMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addWordMeaningApiWordsWordIdMeaningsPost>>,
        TError,
        {wordId: number;data: WordMeaningCreate},
        TContext
      > => {

      const mutationOptions = getAddWordMeaningApiWordsWordIdMeaningsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add Word Example
 */
export const addWordExampleApiWordsWordIdExamplesPost = (
    wordId: number,
    wordMeaningExampleCreate: WordMeaningExampleCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningExampleResponse>> => {
    
    
    return axios.default.post(
      `/api/words/${wordId}/examples`,
      wordMeaningExampleCreate,options
    );
  }



export const getAddWordExampleApiWordsWordIdExamplesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordExampleApiWordsWordIdExamplesPost>>, TError,{wordId: number;data: WordMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addWordExampleApiWordsWordIdExamplesPost>>, TError,{wordId: number;data: WordMeaningExampleCreate}, TContext> => {

const mutationKey = ['addWordExampleApiWordsWordIdExamplesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addWordExampleApiWordsWordIdExamplesPost>>, {wordId: number;data: WordMeaningExampleCreate}> = (props) => {
          const {wordId,data} = props ?? {};

          return  addWordExampleApiWordsWordIdExamplesPost(wordId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddWordExampleApiWordsWordIdExamplesPostMutationResult = NonNullable<Awaited<ReturnType<typeof addWordExampleApiWordsWordIdExamplesPost>>>
    export type AddWordExampleApiWordsWordIdExamplesPostMutationBody = WordMeaningExampleCreate
    export type AddWordExampleApiWordsWordIdExamplesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Word Example
 */
export const useAddWordExampleApiWordsWordIdExamplesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordExampleApiWordsWordIdExamplesPost>>, TError,{wordId: number;data: WordMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addWordExampleApiWordsWordIdExamplesPost>>,
        TError,
        {wordId: number;data: WordMeaningExampleCreate},
        TContext
      > => {

      const mutationOptions = getAddWordExampleApiWordsWordIdExamplesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Search Words By Text
 */
export const searchWordsByTextApiWordsSearchByTextGet = (
    params: SearchWordsByTextApiWordsSearchByTextGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse[]>> => {
    
    
    return axios.default.get(
      `/api/words/search-by-text`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchWordsByTextApiWordsSearchByTextGetQueryKey = (params: SearchWordsByTextApiWordsSearchByTextGetParams,) => {
    return [`/api/words/search-by-text`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchWordsByTextApiWordsSearchByTextGetQueryOptions = <TData = Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>, TError = AxiosError<HTTPValidationError>>(params: SearchWordsByTextApiWordsSearchByTextGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchWordsByTextApiWordsSearchByTextGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>> = ({ signal }) => searchWordsByTextApiWordsSearchByTextGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchWordsByTextApiWordsSearchByTextGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>>
export type SearchWordsByTextApiWordsSearchByTextGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search Words By Text
 */

export function useSearchWordsByTextApiWordsSearchByTextGet<TData = Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>, TError = AxiosError<HTTPValidationError>>(
 params: SearchWordsByTextApiWordsSearchByTextGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchWordsByTextApiWordsSearchByTextGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchWordsByTextApiWordsSearchByTextGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Word Meaning
 */
export const updateWordMeaningApiWordsMeaningsMeaningIdPut = (
    meaningId: number,
    wordMeaningCreate: WordMeaningCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningResponse>> => {
    
    
    return axios.default.put(
      `/api/words/meanings/${meaningId}`,
      wordMeaningCreate,options
    );
  }



export const getUpdateWordMeaningApiWordsMeaningsMeaningIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordMeaningApiWordsMeaningsMeaningIdPut>>, TError,{meaningId: number;data: WordMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateWordMeaningApiWordsMeaningsMeaningIdPut>>, TError,{meaningId: number;data: WordMeaningCreate}, TContext> => {

const mutationKey = ['updateWordMeaningApiWordsMeaningsMeaningIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWordMeaningApiWordsMeaningsMeaningIdPut>>, {meaningId: number;data: WordMeaningCreate}> = (props) => {
          const {meaningId,data} = props ?? {};

          return  updateWordMeaningApiWordsMeaningsMeaningIdPut(meaningId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateWordMeaningApiWordsMeaningsMeaningIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateWordMeaningApiWordsMeaningsMeaningIdPut>>>
    export type UpdateWordMeaningApiWordsMeaningsMeaningIdPutMutationBody = WordMeaningCreate
    export type UpdateWordMeaningApiWordsMeaningsMeaningIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Word Meaning
 */
export const useUpdateWordMeaningApiWordsMeaningsMeaningIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordMeaningApiWordsMeaningsMeaningIdPut>>, TError,{meaningId: number;data: WordMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateWordMeaningApiWordsMeaningsMeaningIdPut>>,
        TError,
        {meaningId: number;data: WordMeaningCreate},
        TContext
      > => {

      const mutationOptions = getUpdateWordMeaningApiWordsMeaningsMeaningIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Word Meaning
 */
export const deleteWordMeaningApiWordsMeaningsMeaningIdDelete = (
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/words/meanings/${meaningId}`,options
    );
  }



export const getDeleteWordMeaningApiWordsMeaningsMeaningIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordMeaningApiWordsMeaningsMeaningIdDelete>>, TError,{meaningId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWordMeaningApiWordsMeaningsMeaningIdDelete>>, TError,{meaningId: number}, TContext> => {

const mutationKey = ['deleteWordMeaningApiWordsMeaningsMeaningIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWordMeaningApiWordsMeaningsMeaningIdDelete>>, {meaningId: number}> = (props) => {
          const {meaningId} = props ?? {};

          return  deleteWordMeaningApiWordsMeaningsMeaningIdDelete(meaningId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWordMeaningApiWordsMeaningsMeaningIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWordMeaningApiWordsMeaningsMeaningIdDelete>>>
    
    export type DeleteWordMeaningApiWordsMeaningsMeaningIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Word Meaning
 */
export const useDeleteWordMeaningApiWordsMeaningsMeaningIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordMeaningApiWordsMeaningsMeaningIdDelete>>, TError,{meaningId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWordMeaningApiWordsMeaningsMeaningIdDelete>>,
        TError,
        {meaningId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWordMeaningApiWordsMeaningsMeaningIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Patch Word Meaning
 */
export const patchWordMeaningApiWordsMeaningsMeaningIdPatch = (
    meaningId: number,
    wordMeaningCreate: WordMeaningCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningResponse>> => {
    
    
    return axios.default.patch(
      `/api/words/meanings/${meaningId}`,
      wordMeaningCreate,options
    );
  }



export const getPatchWordMeaningApiWordsMeaningsMeaningIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchWordMeaningApiWordsMeaningsMeaningIdPatch>>, TError,{meaningId: number;data: WordMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchWordMeaningApiWordsMeaningsMeaningIdPatch>>, TError,{meaningId: number;data: WordMeaningCreate}, TContext> => {

const mutationKey = ['patchWordMeaningApiWordsMeaningsMeaningIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchWordMeaningApiWordsMeaningsMeaningIdPatch>>, {meaningId: number;data: WordMeaningCreate}> = (props) => {
          const {meaningId,data} = props ?? {};

          return  patchWordMeaningApiWordsMeaningsMeaningIdPatch(meaningId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchWordMeaningApiWordsMeaningsMeaningIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof patchWordMeaningApiWordsMeaningsMeaningIdPatch>>>
    export type PatchWordMeaningApiWordsMeaningsMeaningIdPatchMutationBody = WordMeaningCreate
    export type PatchWordMeaningApiWordsMeaningsMeaningIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Patch Word Meaning
 */
export const usePatchWordMeaningApiWordsMeaningsMeaningIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchWordMeaningApiWordsMeaningsMeaningIdPatch>>, TError,{meaningId: number;data: WordMeaningCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchWordMeaningApiWordsMeaningsMeaningIdPatch>>,
        TError,
        {meaningId: number;data: WordMeaningCreate},
        TContext
      > => {

      const mutationOptions = getPatchWordMeaningApiWordsMeaningsMeaningIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add Word Meaning Example
 */
export const addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost = (
    meaningId: number,
    wordMeaningExampleCreate: WordMeaningExampleCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningExampleResponse>> => {
    
    
    return axios.default.post(
      `/api/words/meanings/${meaningId}/examples`,
      wordMeaningExampleCreate,options
    );
  }



export const getAddWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost>>, TError,{meaningId: number;data: WordMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost>>, TError,{meaningId: number;data: WordMeaningExampleCreate}, TContext> => {

const mutationKey = ['addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost>>, {meaningId: number;data: WordMeaningExampleCreate}> = (props) => {
          const {meaningId,data} = props ?? {};

          return  addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost(meaningId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPostMutationResult = NonNullable<Awaited<ReturnType<typeof addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost>>>
    export type AddWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPostMutationBody = WordMeaningExampleCreate
    export type AddWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Word Meaning Example
 */
export const useAddWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost>>, TError,{meaningId: number;data: WordMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPost>>,
        TError,
        {meaningId: number;data: WordMeaningExampleCreate},
        TContext
      > => {

      const mutationOptions = getAddWordMeaningExampleApiWordsMeaningsMeaningIdExamplesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Update Word Meaning Example
 */
export const updateWordMeaningExampleApiWordsExamplesExampleIdPut = (
    exampleId: number,
    wordMeaningExampleCreate: WordMeaningExampleCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningExampleResponse>> => {
    
    
    return axios.default.put(
      `/api/words/examples/${exampleId}`,
      wordMeaningExampleCreate,options
    );
  }



export const getUpdateWordMeaningExampleApiWordsExamplesExampleIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordMeaningExampleApiWordsExamplesExampleIdPut>>, TError,{exampleId: number;data: WordMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateWordMeaningExampleApiWordsExamplesExampleIdPut>>, TError,{exampleId: number;data: WordMeaningExampleCreate}, TContext> => {

const mutationKey = ['updateWordMeaningExampleApiWordsExamplesExampleIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWordMeaningExampleApiWordsExamplesExampleIdPut>>, {exampleId: number;data: WordMeaningExampleCreate}> = (props) => {
          const {exampleId,data} = props ?? {};

          return  updateWordMeaningExampleApiWordsExamplesExampleIdPut(exampleId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateWordMeaningExampleApiWordsExamplesExampleIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateWordMeaningExampleApiWordsExamplesExampleIdPut>>>
    export type UpdateWordMeaningExampleApiWordsExamplesExampleIdPutMutationBody = WordMeaningExampleCreate
    export type UpdateWordMeaningExampleApiWordsExamplesExampleIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Word Meaning Example
 */
export const useUpdateWordMeaningExampleApiWordsExamplesExampleIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWordMeaningExampleApiWordsExamplesExampleIdPut>>, TError,{exampleId: number;data: WordMeaningExampleCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateWordMeaningExampleApiWordsExamplesExampleIdPut>>,
        TError,
        {exampleId: number;data: WordMeaningExampleCreate},
        TContext
      > => {

      const mutationOptions = getUpdateWordMeaningExampleApiWordsExamplesExampleIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete Word Meaning Example
 */
export const deleteWordMeaningExampleApiWordsExamplesExampleIdDelete = (
    exampleId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/words/examples/${exampleId}`,options
    );
  }



export const getDeleteWordMeaningExampleApiWordsExamplesExampleIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordMeaningExampleApiWordsExamplesExampleIdDelete>>, TError,{exampleId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWordMeaningExampleApiWordsExamplesExampleIdDelete>>, TError,{exampleId: number}, TContext> => {

const mutationKey = ['deleteWordMeaningExampleApiWordsExamplesExampleIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWordMeaningExampleApiWordsExamplesExampleIdDelete>>, {exampleId: number}> = (props) => {
          const {exampleId} = props ?? {};

          return  deleteWordMeaningExampleApiWordsExamplesExampleIdDelete(exampleId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWordMeaningExampleApiWordsExamplesExampleIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWordMeaningExampleApiWordsExamplesExampleIdDelete>>>
    
    export type DeleteWordMeaningExampleApiWordsExamplesExampleIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Word Meaning Example
 */
export const useDeleteWordMeaningExampleApiWordsExamplesExampleIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWordMeaningExampleApiWordsExamplesExampleIdDelete>>, TError,{exampleId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWordMeaningExampleApiWordsExamplesExampleIdDelete>>,
        TError,
        {exampleId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWordMeaningExampleApiWordsExamplesExampleIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Patch Word Meaning Example
 */
export const patchWordMeaningExampleApiWordsExamplesExampleIdPatch = (
    exampleId: number,
    wordMeaningExampleUpdate: WordMeaningExampleUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordMeaningExampleResponse>> => {
    
    
    return axios.default.patch(
      `/api/words/examples/${exampleId}`,
      wordMeaningExampleUpdate,options
    );
  }



export const getPatchWordMeaningExampleApiWordsExamplesExampleIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchWordMeaningExampleApiWordsExamplesExampleIdPatch>>, TError,{exampleId: number;data: WordMeaningExampleUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchWordMeaningExampleApiWordsExamplesExampleIdPatch>>, TError,{exampleId: number;data: WordMeaningExampleUpdate}, TContext> => {

const mutationKey = ['patchWordMeaningExampleApiWordsExamplesExampleIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchWordMeaningExampleApiWordsExamplesExampleIdPatch>>, {exampleId: number;data: WordMeaningExampleUpdate}> = (props) => {
          const {exampleId,data} = props ?? {};

          return  patchWordMeaningExampleApiWordsExamplesExampleIdPatch(exampleId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchWordMeaningExampleApiWordsExamplesExampleIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof patchWordMeaningExampleApiWordsExamplesExampleIdPatch>>>
    export type PatchWordMeaningExampleApiWordsExamplesExampleIdPatchMutationBody = WordMeaningExampleUpdate
    export type PatchWordMeaningExampleApiWordsExamplesExampleIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Patch Word Meaning Example
 */
export const usePatchWordMeaningExampleApiWordsExamplesExampleIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchWordMeaningExampleApiWordsExamplesExampleIdPatch>>, TError,{exampleId: number;data: WordMeaningExampleUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchWordMeaningExampleApiWordsExamplesExampleIdPatch>>,
        TError,
        {exampleId: number;data: WordMeaningExampleUpdate},
        TContext
      > => {

      const mutationOptions = getPatchWordMeaningExampleApiWordsExamplesExampleIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Remove Category From Word
 */
export const removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch = (
    wordId: number,
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WordResponse>> => {
    
    
    return axios.default.patch(
      `/api/words/${wordId}/remove-category/${categoryId}`,undefined,options
    );
  }



export const getRemoveCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatchMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch>>, TError,{wordId: number;categoryId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch>>, TError,{wordId: number;categoryId: number}, TContext> => {

const mutationKey = ['removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch>>, {wordId: number;categoryId: number}> = (props) => {
          const {wordId,categoryId} = props ?? {};

          return  removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch(wordId,categoryId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch>>>
    
    export type RemoveCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatchMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Remove Category From Word
 */
export const useRemoveCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch>>, TError,{wordId: number;categoryId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof removeCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatch>>,
        TError,
        {wordId: number;categoryId: number},
        TContext
      > => {

      const mutationOptions = getRemoveCategoryFromWordApiWordsWordIdRemoveCategoryCategoryIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    